// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_my_5fdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_my_5fdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_my_5fdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_my_5fdb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_my_5fdb_2eproto;
namespace mydb {
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class EntryKey;
struct EntryKeyDefaultTypeInternal;
extern EntryKeyDefaultTypeInternal _EntryKey_default_instance_;
class EntryValue;
struct EntryValueDefaultTypeInternal;
extern EntryValueDefaultTypeInternal _EntryValue_default_instance_;
class MEntryKey;
struct MEntryKeyDefaultTypeInternal;
extern MEntryKeyDefaultTypeInternal _MEntryKey_default_instance_;
class MEntryValue;
struct MEntryValueDefaultTypeInternal;
extern MEntryValueDefaultTypeInternal _MEntryValue_default_instance_;
}  // namespace mydb
PROTOBUF_NAMESPACE_OPEN
template<> ::mydb::Entry* Arena::CreateMaybeMessage<::mydb::Entry>(Arena*);
template<> ::mydb::EntryKey* Arena::CreateMaybeMessage<::mydb::EntryKey>(Arena*);
template<> ::mydb::EntryValue* Arena::CreateMaybeMessage<::mydb::EntryValue>(Arena*);
template<> ::mydb::MEntryKey* Arena::CreateMaybeMessage<::mydb::MEntryKey>(Arena*);
template<> ::mydb::MEntryValue* Arena::CreateMaybeMessage<::mydb::MEntryValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mydb {

// ===================================================================

class MEntryKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mydb.MEntryKey) */ {
 public:
  inline MEntryKey() : MEntryKey(nullptr) {}
  ~MEntryKey() override;
  explicit constexpr MEntryKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MEntryKey(const MEntryKey& from);
  MEntryKey(MEntryKey&& from) noexcept
    : MEntryKey() {
    *this = ::std::move(from);
  }

  inline MEntryKey& operator=(const MEntryKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline MEntryKey& operator=(MEntryKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MEntryKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const MEntryKey* internal_default_instance() {
    return reinterpret_cast<const MEntryKey*>(
               &_MEntryKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MEntryKey& a, MEntryKey& b) {
    a.Swap(&b);
  }
  inline void Swap(MEntryKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MEntryKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MEntryKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MEntryKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MEntryKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MEntryKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MEntryKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mydb.MEntryKey";
  }
  protected:
  explicit MEntryKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryKeyFieldNumber = 1,
  };
  // repeated .mydb.EntryKey entryKey = 1;
  int entrykey_size() const;
  private:
  int _internal_entrykey_size() const;
  public:
  void clear_entrykey();
  ::mydb::EntryKey* mutable_entrykey(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryKey >*
      mutable_entrykey();
  private:
  const ::mydb::EntryKey& _internal_entrykey(int index) const;
  ::mydb::EntryKey* _internal_add_entrykey();
  public:
  const ::mydb::EntryKey& entrykey(int index) const;
  ::mydb::EntryKey* add_entrykey();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryKey >&
      entrykey() const;

  // @@protoc_insertion_point(class_scope:mydb.MEntryKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryKey > entrykey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_my_5fdb_2eproto;
};
// -------------------------------------------------------------------

class MEntryValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mydb.MEntryValue) */ {
 public:
  inline MEntryValue() : MEntryValue(nullptr) {}
  ~MEntryValue() override;
  explicit constexpr MEntryValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MEntryValue(const MEntryValue& from);
  MEntryValue(MEntryValue&& from) noexcept
    : MEntryValue() {
    *this = ::std::move(from);
  }

  inline MEntryValue& operator=(const MEntryValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MEntryValue& operator=(MEntryValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MEntryValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MEntryValue* internal_default_instance() {
    return reinterpret_cast<const MEntryValue*>(
               &_MEntryValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MEntryValue& a, MEntryValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MEntryValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MEntryValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MEntryValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MEntryValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MEntryValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MEntryValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MEntryValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mydb.MEntryValue";
  }
  protected:
  explicit MEntryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryValueFieldNumber = 1,
  };
  // repeated .mydb.EntryValue entryValue = 1;
  int entryvalue_size() const;
  private:
  int _internal_entryvalue_size() const;
  public:
  void clear_entryvalue();
  ::mydb::EntryValue* mutable_entryvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryValue >*
      mutable_entryvalue();
  private:
  const ::mydb::EntryValue& _internal_entryvalue(int index) const;
  ::mydb::EntryValue* _internal_add_entryvalue();
  public:
  const ::mydb::EntryValue& entryvalue(int index) const;
  ::mydb::EntryValue* add_entryvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryValue >&
      entryvalue() const;

  // @@protoc_insertion_point(class_scope:mydb.MEntryValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryValue > entryvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_my_5fdb_2eproto;
};
// -------------------------------------------------------------------

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mydb.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  explicit constexpr Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mydb.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryKeyFieldNumber = 1,
    kEntryValueFieldNumber = 2,
  };
  // .mydb.EntryKey entryKey = 1;
  bool has_entrykey() const;
  private:
  bool _internal_has_entrykey() const;
  public:
  void clear_entrykey();
  const ::mydb::EntryKey& entrykey() const;
  PROTOBUF_NODISCARD ::mydb::EntryKey* release_entrykey();
  ::mydb::EntryKey* mutable_entrykey();
  void set_allocated_entrykey(::mydb::EntryKey* entrykey);
  private:
  const ::mydb::EntryKey& _internal_entrykey() const;
  ::mydb::EntryKey* _internal_mutable_entrykey();
  public:
  void unsafe_arena_set_allocated_entrykey(
      ::mydb::EntryKey* entrykey);
  ::mydb::EntryKey* unsafe_arena_release_entrykey();

  // .mydb.EntryValue entryValue = 2;
  bool has_entryvalue() const;
  private:
  bool _internal_has_entryvalue() const;
  public:
  void clear_entryvalue();
  const ::mydb::EntryValue& entryvalue() const;
  PROTOBUF_NODISCARD ::mydb::EntryValue* release_entryvalue();
  ::mydb::EntryValue* mutable_entryvalue();
  void set_allocated_entryvalue(::mydb::EntryValue* entryvalue);
  private:
  const ::mydb::EntryValue& _internal_entryvalue() const;
  ::mydb::EntryValue* _internal_mutable_entryvalue();
  public:
  void unsafe_arena_set_allocated_entryvalue(
      ::mydb::EntryValue* entryvalue);
  ::mydb::EntryValue* unsafe_arena_release_entryvalue();

  // @@protoc_insertion_point(class_scope:mydb.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mydb::EntryKey* entrykey_;
  ::mydb::EntryValue* entryvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_my_5fdb_2eproto;
};
// -------------------------------------------------------------------

class EntryKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mydb.EntryKey) */ {
 public:
  inline EntryKey() : EntryKey(nullptr) {}
  ~EntryKey() override;
  explicit constexpr EntryKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntryKey(const EntryKey& from);
  EntryKey(EntryKey&& from) noexcept
    : EntryKey() {
    *this = ::std::move(from);
  }

  inline EntryKey& operator=(const EntryKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryKey& operator=(EntryKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntryKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntryKey* internal_default_instance() {
    return reinterpret_cast<const EntryKey*>(
               &_EntryKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EntryKey& a, EntryKey& b) {
    a.Swap(&b);
  }
  inline void Swap(EntryKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntryKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntryKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntryKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntryKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EntryKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mydb.EntryKey";
  }
  protected:
  explicit EntryKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:mydb.EntryKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_my_5fdb_2eproto;
};
// -------------------------------------------------------------------

class EntryValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mydb.EntryValue) */ {
 public:
  inline EntryValue() : EntryValue(nullptr) {}
  ~EntryValue() override;
  explicit constexpr EntryValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntryValue(const EntryValue& from);
  EntryValue(EntryValue&& from) noexcept
    : EntryValue() {
    *this = ::std::move(from);
  }

  inline EntryValue& operator=(const EntryValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryValue& operator=(EntryValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntryValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntryValue* internal_default_instance() {
    return reinterpret_cast<const EntryValue*>(
               &_EntryValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EntryValue& a, EntryValue& b) {
    a.Swap(&b);
  }
  inline void Swap(EntryValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntryValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntryValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntryValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntryValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EntryValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mydb.EntryValue";
  }
  protected:
  explicit EntryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:mydb.EntryValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_my_5fdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MEntryKey

// repeated .mydb.EntryKey entryKey = 1;
inline int MEntryKey::_internal_entrykey_size() const {
  return entrykey_.size();
}
inline int MEntryKey::entrykey_size() const {
  return _internal_entrykey_size();
}
inline void MEntryKey::clear_entrykey() {
  entrykey_.Clear();
}
inline ::mydb::EntryKey* MEntryKey::mutable_entrykey(int index) {
  // @@protoc_insertion_point(field_mutable:mydb.MEntryKey.entryKey)
  return entrykey_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryKey >*
MEntryKey::mutable_entrykey() {
  // @@protoc_insertion_point(field_mutable_list:mydb.MEntryKey.entryKey)
  return &entrykey_;
}
inline const ::mydb::EntryKey& MEntryKey::_internal_entrykey(int index) const {
  return entrykey_.Get(index);
}
inline const ::mydb::EntryKey& MEntryKey::entrykey(int index) const {
  // @@protoc_insertion_point(field_get:mydb.MEntryKey.entryKey)
  return _internal_entrykey(index);
}
inline ::mydb::EntryKey* MEntryKey::_internal_add_entrykey() {
  return entrykey_.Add();
}
inline ::mydb::EntryKey* MEntryKey::add_entrykey() {
  ::mydb::EntryKey* _add = _internal_add_entrykey();
  // @@protoc_insertion_point(field_add:mydb.MEntryKey.entryKey)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryKey >&
MEntryKey::entrykey() const {
  // @@protoc_insertion_point(field_list:mydb.MEntryKey.entryKey)
  return entrykey_;
}

// -------------------------------------------------------------------

// MEntryValue

// repeated .mydb.EntryValue entryValue = 1;
inline int MEntryValue::_internal_entryvalue_size() const {
  return entryvalue_.size();
}
inline int MEntryValue::entryvalue_size() const {
  return _internal_entryvalue_size();
}
inline void MEntryValue::clear_entryvalue() {
  entryvalue_.Clear();
}
inline ::mydb::EntryValue* MEntryValue::mutable_entryvalue(int index) {
  // @@protoc_insertion_point(field_mutable:mydb.MEntryValue.entryValue)
  return entryvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryValue >*
MEntryValue::mutable_entryvalue() {
  // @@protoc_insertion_point(field_mutable_list:mydb.MEntryValue.entryValue)
  return &entryvalue_;
}
inline const ::mydb::EntryValue& MEntryValue::_internal_entryvalue(int index) const {
  return entryvalue_.Get(index);
}
inline const ::mydb::EntryValue& MEntryValue::entryvalue(int index) const {
  // @@protoc_insertion_point(field_get:mydb.MEntryValue.entryValue)
  return _internal_entryvalue(index);
}
inline ::mydb::EntryValue* MEntryValue::_internal_add_entryvalue() {
  return entryvalue_.Add();
}
inline ::mydb::EntryValue* MEntryValue::add_entryvalue() {
  ::mydb::EntryValue* _add = _internal_add_entryvalue();
  // @@protoc_insertion_point(field_add:mydb.MEntryValue.entryValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mydb::EntryValue >&
MEntryValue::entryvalue() const {
  // @@protoc_insertion_point(field_list:mydb.MEntryValue.entryValue)
  return entryvalue_;
}

// -------------------------------------------------------------------

// Entry

// .mydb.EntryKey entryKey = 1;
inline bool Entry::_internal_has_entrykey() const {
  return this != internal_default_instance() && entrykey_ != nullptr;
}
inline bool Entry::has_entrykey() const {
  return _internal_has_entrykey();
}
inline void Entry::clear_entrykey() {
  if (GetArenaForAllocation() == nullptr && entrykey_ != nullptr) {
    delete entrykey_;
  }
  entrykey_ = nullptr;
}
inline const ::mydb::EntryKey& Entry::_internal_entrykey() const {
  const ::mydb::EntryKey* p = entrykey_;
  return p != nullptr ? *p : reinterpret_cast<const ::mydb::EntryKey&>(
      ::mydb::_EntryKey_default_instance_);
}
inline const ::mydb::EntryKey& Entry::entrykey() const {
  // @@protoc_insertion_point(field_get:mydb.Entry.entryKey)
  return _internal_entrykey();
}
inline void Entry::unsafe_arena_set_allocated_entrykey(
    ::mydb::EntryKey* entrykey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entrykey_);
  }
  entrykey_ = entrykey;
  if (entrykey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mydb.Entry.entryKey)
}
inline ::mydb::EntryKey* Entry::release_entrykey() {
  
  ::mydb::EntryKey* temp = entrykey_;
  entrykey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mydb::EntryKey* Entry::unsafe_arena_release_entrykey() {
  // @@protoc_insertion_point(field_release:mydb.Entry.entryKey)
  
  ::mydb::EntryKey* temp = entrykey_;
  entrykey_ = nullptr;
  return temp;
}
inline ::mydb::EntryKey* Entry::_internal_mutable_entrykey() {
  
  if (entrykey_ == nullptr) {
    auto* p = CreateMaybeMessage<::mydb::EntryKey>(GetArenaForAllocation());
    entrykey_ = p;
  }
  return entrykey_;
}
inline ::mydb::EntryKey* Entry::mutable_entrykey() {
  ::mydb::EntryKey* _msg = _internal_mutable_entrykey();
  // @@protoc_insertion_point(field_mutable:mydb.Entry.entryKey)
  return _msg;
}
inline void Entry::set_allocated_entrykey(::mydb::EntryKey* entrykey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete entrykey_;
  }
  if (entrykey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mydb::EntryKey>::GetOwningArena(entrykey);
    if (message_arena != submessage_arena) {
      entrykey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entrykey, submessage_arena);
    }
    
  } else {
    
  }
  entrykey_ = entrykey;
  // @@protoc_insertion_point(field_set_allocated:mydb.Entry.entryKey)
}

// .mydb.EntryValue entryValue = 2;
inline bool Entry::_internal_has_entryvalue() const {
  return this != internal_default_instance() && entryvalue_ != nullptr;
}
inline bool Entry::has_entryvalue() const {
  return _internal_has_entryvalue();
}
inline void Entry::clear_entryvalue() {
  if (GetArenaForAllocation() == nullptr && entryvalue_ != nullptr) {
    delete entryvalue_;
  }
  entryvalue_ = nullptr;
}
inline const ::mydb::EntryValue& Entry::_internal_entryvalue() const {
  const ::mydb::EntryValue* p = entryvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::mydb::EntryValue&>(
      ::mydb::_EntryValue_default_instance_);
}
inline const ::mydb::EntryValue& Entry::entryvalue() const {
  // @@protoc_insertion_point(field_get:mydb.Entry.entryValue)
  return _internal_entryvalue();
}
inline void Entry::unsafe_arena_set_allocated_entryvalue(
    ::mydb::EntryValue* entryvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entryvalue_);
  }
  entryvalue_ = entryvalue;
  if (entryvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mydb.Entry.entryValue)
}
inline ::mydb::EntryValue* Entry::release_entryvalue() {
  
  ::mydb::EntryValue* temp = entryvalue_;
  entryvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mydb::EntryValue* Entry::unsafe_arena_release_entryvalue() {
  // @@protoc_insertion_point(field_release:mydb.Entry.entryValue)
  
  ::mydb::EntryValue* temp = entryvalue_;
  entryvalue_ = nullptr;
  return temp;
}
inline ::mydb::EntryValue* Entry::_internal_mutable_entryvalue() {
  
  if (entryvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::mydb::EntryValue>(GetArenaForAllocation());
    entryvalue_ = p;
  }
  return entryvalue_;
}
inline ::mydb::EntryValue* Entry::mutable_entryvalue() {
  ::mydb::EntryValue* _msg = _internal_mutable_entryvalue();
  // @@protoc_insertion_point(field_mutable:mydb.Entry.entryValue)
  return _msg;
}
inline void Entry::set_allocated_entryvalue(::mydb::EntryValue* entryvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete entryvalue_;
  }
  if (entryvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mydb::EntryValue>::GetOwningArena(entryvalue);
    if (message_arena != submessage_arena) {
      entryvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entryvalue, submessage_arena);
    }
    
  } else {
    
  }
  entryvalue_ = entryvalue;
  // @@protoc_insertion_point(field_set_allocated:mydb.Entry.entryValue)
}

// -------------------------------------------------------------------

// EntryKey

// bytes value = 1;
inline void EntryKey::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& EntryKey::value() const {
  // @@protoc_insertion_point(field_get:mydb.EntryKey.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryKey::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mydb.EntryKey.value)
}
inline std::string* EntryKey::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mydb.EntryKey.value)
  return _s;
}
inline const std::string& EntryKey::_internal_value() const {
  return value_.Get();
}
inline void EntryKey::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EntryKey::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EntryKey::release_value() {
  // @@protoc_insertion_point(field_release:mydb.EntryKey.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EntryKey::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mydb.EntryKey.value)
}

// -------------------------------------------------------------------

// EntryValue

// bytes value = 1;
inline void EntryValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& EntryValue::value() const {
  // @@protoc_insertion_point(field_get:mydb.EntryValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mydb.EntryValue.value)
}
inline std::string* EntryValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mydb.EntryValue.value)
  return _s;
}
inline const std::string& EntryValue::_internal_value() const {
  return value_.Get();
}
inline void EntryValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EntryValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EntryValue::release_value() {
  // @@protoc_insertion_point(field_release:mydb.EntryValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EntryValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mydb.EntryValue.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mydb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_my_5fdb_2eproto
